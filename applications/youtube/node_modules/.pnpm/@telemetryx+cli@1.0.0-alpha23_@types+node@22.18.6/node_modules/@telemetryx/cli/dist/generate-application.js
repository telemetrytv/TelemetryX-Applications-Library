import fs from "fs/promises";
import path from "path";
const ignoredTelemplateFiles = [
    '.DS_Store',
    'thumbs.db',
    'node_modules',
    '.git',
    'dist'
];
const templatesDir = path.join(import.meta.dirname, '../templates');
export async function generateApplication(options) {
    const { name, description, author, version, template, projectPath, progressFn } = options;
    await fs.mkdir(projectPath, { recursive: true });
    await copyDir(path.join(templatesDir, template), projectPath, {
        name,
        description,
        author,
        version
    }, progressFn);
}
async function copyDir(source, destination, replacements, progressFn) {
    const dirListing = await fs.readdir(source);
    for (const dirEntry of dirListing) {
        if (ignoredTelemplateFiles.includes(dirEntry))
            continue;
        const sourcePath = path.join(source, dirEntry);
        const destinationPath = path.join(destination, dirEntry);
        const stats = await fs.stat(sourcePath);
        if (stats.isDirectory()) {
            await fs.mkdir(destinationPath, { recursive: true });
            await copyDir(sourcePath, destinationPath, replacements, progressFn);
        }
        else if (stats.isFile()) {
            await copyFile(sourcePath, destinationPath, replacements, progressFn);
        }
    }
}
async function copyFile(source, destination, replacements, progressFn) {
    let contents = await fs.readFile(source, 'utf-8');
    for (const [key, value] of Object.entries(replacements)) {
        contents = contents.replace(new RegExp(`{{${key}}}`, 'g'), value);
    }
    await fs.writeFile(destination, contents, 'utf-8');
    progressFn(destination);
}
