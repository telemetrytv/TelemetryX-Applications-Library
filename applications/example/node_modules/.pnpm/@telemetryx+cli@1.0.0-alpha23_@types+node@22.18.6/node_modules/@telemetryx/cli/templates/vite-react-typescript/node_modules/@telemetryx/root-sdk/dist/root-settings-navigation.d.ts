import { Store } from './store.js';
type RootSettingsNavigationEntry = {
    label: string;
    path: string;
    entities: RootSettingsNavigationSubEntry[];
};
type RootSettingsNavigationSubEntry = {
    label: string;
    path: string;
};
type RootSettingsNavigationOpts = {
    entries: RootSettingsNavigationEntry[];
};
export type RootSettingsApplicationNavigationState = {
    applicationId: string;
    entries: RootSettingsNavigationEntry[];
};
type RootSettingsNavigationState = Record<string, RootSettingsApplicationNavigationState>;
export declare class RootSettingsNavigation {
    _store: Store;
    /**
     * Creates a new RootSettingsNavigation API instance.
     *
     * @param store The Store instance to use for persistence
     * @throws {Error} If used by an application not mounted at the 'rootSettingsNavigation' mount point
     */
    constructor(store: Store);
    /**
     * Registers navigation entries for the root application in the TelemetryX admin UI.
     *
     * This method allows a root application to define its sidebar navigation structure
     * within the TelemetryX administration UI. The navigation entries will appear in the
     * sidebar menu, allowing users to navigate to different sections of the application.
     *
     * @param navigation An object containing the navigation entries to register
     * @returns A promise that resolves when the navigation has been registered
     */
    setRootSettingsNavigation(navigation: RootSettingsNavigationOpts): Promise<void>;
    /**
     * Retrieves the current navigation entries for this root application.
     *
     * This method returns the navigation structure that was previously registered
     * for this application using setRootSettingsNavigation().
     *
     * @returns A promise that resolves to the navigation state for this application
     */
    getRootSettingsNavigation(): Promise<RootSettingsApplicationNavigationState>;
    /**
     * Retrieves the navigation entries for all root applications.
     *
     * This method returns the navigation structures for all root applications registered
     * in the TelemetryX administration UI. This can be useful for coordination between
     * different root applications.
     *
     * @returns A promise that resolves to the navigation state for all applications
     */
    getAllRootSettingsNavigation(): Promise<RootSettingsNavigationState>;
}
export {};
