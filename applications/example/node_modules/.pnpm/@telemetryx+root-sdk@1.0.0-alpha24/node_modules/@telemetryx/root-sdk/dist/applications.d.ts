import { Client } from './client.js';
export type MountPoint = {
    [key: string]: any;
    path: string;
};
export type Application = {
    name: string;
    mountPoints: Record<string, MountPoint>;
};
export type GetUrlResult = {
    url: string;
};
export declare class Applications {
    _client: Client;
    constructor(client: Client);
    /**
     * Retrieves all applications with a specific mount point within the current account.
     *
     * This method allows applications that host other applications to discover compatible
     * applications that can be embedded. For example, a dashboard application might search
     * for all applications that have a 'dashboard-widget' mount point.
     *
     * The results are scoped to the current account, so only applications associated with
     * the same account will be returned.
     *
     * @param mountPoint The mount point identifier to search for
     * @returns A promise that resolves to an array of applications having the specified mount point
     */
    getAllByMountPoint(mountPoint: string): Promise<Application[]>;
    /**
     * Retrieves an application by its name.
     *
     * This method allows finding a specific application when you know its name. It's useful
     * when you need to check if a particular application is available or get its details
     * before attempting to embed it.
     *
     * @param name The name of the application to query for
     * @returns A promise that resolves to the application object if found, or null if not found
     */
    getByName(name: string): Promise<Application | null>;
    /**
     * Generates a URL for embedding an application with the specified name and mount point.
     *
     * This method returns a URL that can be used in an iframe src attribute to embed
     * the application. The URL includes necessary parameters for the application to
     * understand its context and communicate with the platform.
     *
     * Only applications that are associated with the current account can be retrieved.
     *
     * @param name The name of the application to get the URL for
     * @param mountPoint The mount point to use when embedding the application
     * @returns A promise that resolves to the URL string for embedding the application
     */
    getUrl(name: string, mountPoint: string): Promise<string>;
}
