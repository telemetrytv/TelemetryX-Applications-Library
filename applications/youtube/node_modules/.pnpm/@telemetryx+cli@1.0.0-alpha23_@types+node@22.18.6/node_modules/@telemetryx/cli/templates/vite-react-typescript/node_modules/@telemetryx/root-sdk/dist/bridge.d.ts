import { z } from 'zod';
import { clientMessageValidator } from './client-message-validator.js';
import { bridgeMessageValidator } from './bridge-message-validator.js';
/**
 * Defines the structure of a client message as defined in the
 * clientMessageValidator.
 */
export type ClientMessage = z.infer<typeof clientMessageValidator>;
/**
 * Defines the structure of a bridge message as defined in the
 * bridgeMessageValidator.
 */
export type BridgeMessage = z.infer<typeof bridgeMessageValidator>;
/**
 * The Bridge class is provides a way for host applications to communicate with
 * TelemetryX applications. It listens for window message events and sends
 * messages to all frames.
 *
 * SDK Clients will be listening for these messages, discriminating for messages
 * specifically for them.
 */
export declare class Bridge {
    /**
     * Must be provided you the host application when using the Bridge. This
     * function will be called when a message is received. The message will be
     * passed to the function.
     */
    onMessage?: (message: ClientMessage) => void;
    _windowMessageHandler?: (event: MessageEvent) => void;
    /**
     * Binds the Bridge to the window message event. This will allow the Bridge
     * to listen for messages from the host application.
     */
    bind(): void;
    /**
     * Unbinds the Bridge from the window message event. Useful if the host
     * application no longer needs to communicate with SDK clients.
     */
    unbind(): void;
    /**
     * Sends a message to SDK clients.
     * @param message The message to send.
     */
    send(message: BridgeMessage): void;
}
