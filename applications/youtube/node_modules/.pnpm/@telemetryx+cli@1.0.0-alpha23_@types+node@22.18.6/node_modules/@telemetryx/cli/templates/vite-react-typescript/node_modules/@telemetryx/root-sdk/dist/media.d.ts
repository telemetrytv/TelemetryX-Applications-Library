import { Client } from './client.js';
type MediaContentUser = {};
type MediaContent = {
    id: string;
    contentFolderId: string;
    contentType: string;
    name: string;
    description: string;
    thumbnailUrl: string;
    keys: string[];
    publicUrls: string[];
    hidden: boolean;
    validFrom?: Date;
    validTo?: Date;
    createdBy?: MediaContentUser;
    transcodedAt?: Date;
    createdAt: Date;
    updatedAt: Date;
};
type MediaFolder = {
    id: string;
    parentId: string;
    name: string;
    size: number;
    default: boolean;
    updatedAt: Date;
    createdAt: Date;
};
export declare class Media {
    _client: Client;
    constructor(client: Client);
    /**
     * Queries for media folders based on folder properties.
     *
     * This method allows you to search for media folders that match specific criteria,
     * such as name, ID, or other folder properties.
     *
     * @param query An object with partial MediaFolder properties to match against
     * @returns A promise that resolves to an array of matching media folders
     */
    queryFolders(query: Partial<MediaFolder>): Promise<MediaFolder[]>;
    /**
     * Retrieves media folders that have been tagged with a specific tag.
     *
     * @param tagName The name of the tag to search for
     * @returns A promise that resolves to an array of media folders with the specified tag
     */
    getFoldersByTag(tagName: string): Promise<MediaFolder[]>;
    /**
     * Retrieves a specific media folder by its ID.
     *
     * @param id The unique identifier of the folder to retrieve
     * @returns A promise that resolves to the media folder with the specified ID
     */
    getFolderById(id: string): Promise<MediaFolder>;
    /**
     * Retrieves all media content items within a specific folder.
     *
     * @param folderId The unique identifier of the folder to get content from
     * @returns A promise that resolves to an array of media content items in the folder
     */
    getMediaContentByFolderId(folderId: string): Promise<MediaContent[]>;
    /**
     * Retrieves a specific media content item by its ID.
     *
     * @param id The unique identifier of the media content to retrieve
     * @returns A promise that resolves to the media content item with the specified ID
     */
    getMediaContentById(id: string): Promise<MediaContent>;
}
export {};
