import { Command } from 'commander';
import { generateApplication } from '../generate-application.js';
import inquirer from 'inquirer';
import path from 'path';
export const initCommand = new Command('init')
    .description('Initializes a new telemetryX application')
    .option('-n, --name <string>', 'The name of the application', '')
    .option('-d, --description <string>', 'The description of the application', 'A telemetryX application')
    .option('-a, --author <string>', 'The author of the application', '')
    .option('-v, --version <string>', 'The version of the application', '0.1.0')
    .option('-t, --template <string>', 'The template to use (vite-react-typescript)', '')
    .argument('[project-path]', 'Path to create the new telemetry application project. Defaults to a folder current working directory with the same name as your project', '')
    .action(handleInitCommand);
async function handleInitCommand(projectPath, options) {
    let name = options.name;
    let description = options.description;
    let author = options.author;
    let version = options.version;
    let template = options.template;
    const questions = [];
    if (!name)
        questions.push({
            type: 'input',
            name: 'name',
            message: 'What is the name of your application?',
            validate: (input) => input.length > 0 || 'Application name cannot be empty'
        });
    if (!description)
        questions.push({
            type: 'input',
            name: 'description',
            message: 'What is the description of your application?',
            default: ''
        });
    if (!author)
        questions.push({
            type: 'input',
            name: 'author',
            message: 'Who is the author of your application?',
            default: ''
        });
    if (!version)
        questions.push({
            type: 'input',
            name: 'version',
            message: 'What is the version of your application?',
            default: '0.1.0',
            validate: (input) => /^\d+\.\d+\.\d+(-.+)?$/.test(input) || 'Version must be in semver format (e.g. 1.0.0)'
        });
    if (!template)
        questions.push({
            type: 'list',
            name: 'template',
            message: 'Which template would you like to use?',
            choices: [
                { name: 'Vite + React + TypeScript', value: 'vite-react-typescript' }
            ]
        });
    if (questions.length !== 0) {
        const answers = await inquirer.prompt(questions);
        if (answers.name)
            name = answers.name;
        if (answers.template)
            template = answers.template;
    }
    if (!projectPath)
        projectPath = path.join(process.cwd(), name);
    await generateApplication({
        name,
        description,
        author,
        version,
        template,
        projectPath,
        progressFn: (createdFilePath) => {
            console.log(`.${path.sep}${path.relative(process.cwd(), createdFilePath)}`);
        }
    });
}
