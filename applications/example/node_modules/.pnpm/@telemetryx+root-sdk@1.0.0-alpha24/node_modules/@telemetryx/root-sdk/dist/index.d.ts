export { Accounts } from './accounts.js';
export { Applications } from './applications.js';
export { Environment } from './environment.js';
export { Media } from './media.js';
export { Store } from './store.js';
export { Users } from './users.js';
import { Client } from './client.js';
export { Client, type SubscriptionResult, type MessageHandler } from './client.js';
/**
 * The current version of the TelemetryX SDK.
 *
 * This version string is included in messages sent to the TelemetryX platform
 * for version verification and compatibility checks.
 */
export declare const telemetrySdkVersion: string;
/**
 * Returns the global client instance used by the convenience functions in this package.
 *
 * This function provides direct access to the underlying Client instance that powers
 * all the exported convenience functions (send, request, store, etc.). Most applications
 * should use the convenience functions rather than accessing the client directly.
 *
 * Advanced use cases might require direct access to the client, such as extending
 * the SDK's functionality or managing multiple client instances.
 *
 * @returns The global client instance, or null if configure() hasn't been called yet
 */
export declare function globalClient(): Client | null;
/**
 * Configures the SDK by initializing the global client instance.
 *
 * This function must be called before using any other exported functions that depend on the global client.
 * The exported convenience functions (send, request, store, etc.) use this global instance internally,
 * simplifying integration for applications that don't require multiple client instances.
 *
 * @param applicationName The name of your application - must match the 'name' property in your application's telemetry.config.json file
 */
export declare function configure(applicationName: string): void;
/**
 * Destroys the SDK by unbinding event listeners and clearing the global client instance.
 *
 * This function is useful when you need to clean up resources or prepare to unload
 * the SDK from the page. It ensures proper cleanup of event listeners to prevent memory leaks.
 */
export declare function destroy(): void;
/**
 * Registers a handler function for a specific message type from the TelemetryX platform.
 *
 * The handler will be called each time a message with the specified name is received.
 * You can register multiple handlers for the same message type, and all will be executed
 * when that message is received.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the message type to listen for
 * @param handler The callback function to execute when messages are received
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function on(...args: Parameters<Client['on']>): void;
/**
 * Registers a one-time handler for a specific message type.
 *
 * Similar to the `on` function, but the handler will be automatically removed after it
 * is called once. This is useful for initialization events or operations that should
 * only happen once in response to a particular message.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the message type to listen for
 * @param handler The callback function to execute when the message is received
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function once(...args: Parameters<Client['once']>): void;
/**
 * Removes previously registered message handlers.
 *
 * Use this function to stop receiving messages of a specific type or to remove
 * specific handler functions when they're no longer needed.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the message type to stop listening for
 * @param handler Optional. The specific handler function to remove. If omitted, all handlers for this message type will be removed.
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function off(...args: Parameters<Client['off']>): void;
/**
 * Sends a one-way message to the TelemetryX platform.
 *
 * Use this function for fire-and-forget messages where no response is expected.
 * The message is sent to the parent window using the postMessage API.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the message type to send
 * @param data The data payload to include with the message
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function send(...args: Parameters<Client['send']>): void;
/**
 * Sends a message to the TelemetryX platform and waits for a response.
 *
 * This implements a request-response pattern over the postMessage API. It generates
 * a unique correlation ID and sets up a listener for the response. If no response is
 * received within the timeout period (30 seconds by default), the promise will reject.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the message type (endpoint) to request
 * @param data The data payload to include with the request
 * @returns A promise that resolves with the response data when received
 * @throws {Error} If the request times out
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function request(...args: Parameters<Client['request']>): Promise<unknown>;
/**
 * Sets up a persistent subscription to messages from the TelemetryX platform.
 *
 * This function sends an initial subscription message and registers a handler for
 * a specific message type. The handler will be called each time a message with the
 * matching subscription name is received. Unlike the regular `on()` method, this
 * establishes a formal subscription that can be managed with `unsubscribe()`.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the subscription endpoint
 * @param key An identifier or parameters for what you're subscribing to
 * @param handler The callback function that will be invoked when messages are received
 * @returns A promise that resolves with the subscription result ({success: boolean})
 * @throws {Error} If the subscription request times out
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function subscribe(...args: Parameters<Client['subscribe']>): Promise<import("./client.js").SubscriptionResult<void>>;
/**
 * Cancels a subscription previously created with subscribe().
 *
 * This function removes a subscription and stops the handler from receiving messages.
 * It sends an unsubscribe message to the platform to clean up server-side resources
 * and removes the local message handler.
 *
 * NOTE: Most application developers should use resource-specific APIs instead of
 * using raw message handlers through on(), send(), request(), etc.
 *
 * @param name The name of the subscription endpoint (same as used in subscribe)
 * @param key The identifier or parameters for the subscription to cancel
 * @param handler Optional. The specific handler to unsubscribe. If omitted, all handlers for this key will be unsubscribed.
 * @returns A promise that resolves with the unsubscription result ({success: boolean})
 * @throws {Error} If the unsubscription request times out
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function unsubscribe(...args: Parameters<Client['unsubscribe']>): Promise<import("./client.js").SubscriptionResult<void>>;
/**
 * Provides access to the data storage API with multiple persistence scopes.
 *
 * The store API allows you to save, retrieve, and subscribe to data changes. It offers
 * four different storage scopes for different persistence needs:
 *
 * - global: Data shared across all instances of this application within an account
 * - local: Data specific to the current instance of this application
 * - deviceLocal: Data available only on the current device
 * - shared: Data shared between different applications through a common namespace
 *
 * Applications should generally use subscribe() for real-time data access since they may
 * run indefinitely and need to respond to changes. The get() method is provided primarily
 * for ad-hoc or initialization scenarios.
 *
 * @returns The Store API object with access to all storage scopes
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function store(): import("./store.js").Store;
/**
 * Provides access to the applications API for embedding other TelemetryX applications.
 *
 * This API enables applications to discover and embed other applications within the
 * TelemetryX ecosystem. It allows querying for applications by name or mount point,
 * and generating URLs that can be used to load applications in iframes.
 *
 * @returns The Applications API object
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function applications(): import("./applications.js").Applications;
/**
 * Provides access to the media API for working with content hosted on the TelemetryX platform.
 *
 * This API allows applications to browse and access media content uploaded to TelemetryX.
 * Applications can query media folders, retrieve content metadata, and get access to media files.
 *
 * @returns The Media API object
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function media(): import("./media.js").Media;
/**
 * Provides access to the accounts API for retrieving TelemetryX account information.
 * @returns The Accounts API object
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function accounts(): import("./accounts.js").Accounts;
/**
 * Provides access to the users API for retrieving TelemetryX user information.
 * @returns The Users API object
 * @throws {Error} If called before configure() or after destroy()
 */
export declare function users(): import("./users.js").Users;
/**
 * Provides access to the root settings navigation API for TelemetryX administration UI integration.
 *
 * NOTE: This API is not intended for most application developers. It is specifically designed
 * for root applications that need to integrate with the TelemetryX administration UI.
 *
 * This API allows root applications to register sidebar navigation entries in the TelemetryX
 * administration UI. It can only be used by applications that are mounted at the
 * 'rootSettingsNavigation' mount point.
 *
 * @returns The RootSettingsNavigation API object
 * @throws {Error} If called before configure() or after destroy()
 * @throws {Error} If used by an application not mounted at the 'rootSettingsNavigation' mount point
 */
export declare function rootSettingsNavigation(): import("./root-settings-navigation.js").RootSettingsNavigation;
