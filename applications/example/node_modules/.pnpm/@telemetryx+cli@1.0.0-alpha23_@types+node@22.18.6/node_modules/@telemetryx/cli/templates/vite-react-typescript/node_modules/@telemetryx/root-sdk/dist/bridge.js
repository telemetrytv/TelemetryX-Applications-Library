import { z as e } from "./index-B98VDFRY.js";
const t = e.object({
  telemetrySdkVersion: e.string(),
  applicationName: e.string(),
  name: e.string(),
  data: e.any(),
  responseName: e.string().optional(),
  subscriptionName: e.string().optional(),
  unsubscribeName: e.string().optional()
});
class d {
  /**
   * Binds the Bridge to the window message event. This will allow the Bridge
   * to listen for messages from the host application.
   */
  bind() {
    this._windowMessageHandler = (n) => {
      var s;
      if (n.source === window)
        return;
      const i = t.safeParse(n.data);
      if (!i.success)
        return;
      const a = i.data;
      (s = this.onMessage) === null || s === void 0 || s.call(this, a);
    }, window.addEventListener("message", this._windowMessageHandler);
  }
  /**
   * Unbinds the Bridge from the window message event. Useful if the host
   * application no longer needs to communicate with SDK clients.
   */
  unbind() {
    this._windowMessageHandler && window.removeEventListener("message", this._windowMessageHandler);
  }
  /**
   * Sends a message to SDK clients.
   * @param message The message to send.
   */
  send(n) {
    for (let s = 0; s < window.frames.length; s += 1)
      window.frames[s].postMessage(n, "*");
  }
}
export {
  d as Bridge
};
