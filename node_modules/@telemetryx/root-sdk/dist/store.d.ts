import { Client, MessageHandler } from './client.js';
export declare class Store {
    _client: Client;
    constructor(client: Client);
    /**
     * Provides access to the application store scope.
     *
     * Data stored in the application scope is shared across all instances of your application
     * within the current account. Use this scope for application-wide settings, shared resources,
     * or any data that should be consistent across all instances.
     *
     * @returns A StoreSlice instance for the application scope
     */
    get application(): StoreSlice;
    /**
     * Provides access to the instance store scope.
     *
     * Data stored in the instance scope is only available to the current instance of your
     * application. This is ideal for instance-specific settings, UI state, temporary data,
     * or any information that shouldn't be shared with other instances.
     *
     * The namespace for instance data includes both the application name and the instance ID.
     *
     * @returns A StoreSlice instance for the instance scope
     */
    get instance(): StoreSlice;
    /**
     * Provides access to the device store scope.
     *
     * Data stored in the device scope is only available to the application on the
     * current physical device. This is useful for device-specific settings, caching, or
     * any data that should persist across application instances but only on a single device.
     *
     * Note: This scope cannot be used for Settings-related mount points as the User
     * Administration UI does not run on a device.
     *
     * @returns A StoreSlice instance for the device scope
     */
    get device(): StoreSlice;
    /**
     * @deprecated Use `application` instead
     * Provides access to the application store scope (legacy name).
     */
    get global(): StoreSlice;
    /**
     * @deprecated Use `instance` instead
     * Provides access to the instance store scope (legacy name).
     */
    get local(): StoreSlice;
    /**
     * @deprecated Use `device` instead
     * Provides access to the device store scope (legacy name).
     */
    get deviceLocal(): StoreSlice;
    /**
     * Provides access to the shared store scope with a specified namespace.
     *
     * The shared scope enables data sharing between different applications within the
     * same account. By specifying a common namespace, any two applications can exchange
     * data and communicate with each other.
     *
     * This is particularly useful for application ecosystems where multiple applications
     * need to coordinate or share configuration.
     *
     * @param namespace A string identifier for the shared data space
     * @returns A StoreSlice instance for the specified shared namespace
     */
    shared(namespace: string): StoreSlice;
}
/**
 * Provides methods for saving, retrieving, and subscribing to data in a specific store scope.
 *
 * StoreSlice is the concrete implementation for interacting with a particular storage scope
 * (application, instance, device, or shared). It offers methods to set and get values, subscribe
 * to changes, and delete data within its specific scope and namespace.
 *
 * This class is not typically instantiated directly by applications. Instead, use the
 * properties and methods of the Store class to access the appropriate StoreSlice.
 */
declare class StoreSlice {
    _kind: string;
    _namespace: string;
    _client: Client;
    constructor(kind: string, namespace: string, client: Client);
    /**
     * Saves a value in the store.
     *
     * This method stores data under the specified key within the current store scope and namespace.
     * The value must be serializable (can be converted to JSON). Complex objects like Date instances
     * will be serialized and deserialize as regular objects, losing their prototype methods.
     *
     * @param key The key to save the value under
     * @param value The value to store - must be JSON serializable
     * @returns A promise that resolves to true if the value was saved successfully
     */
    set(key: string, value: any): Promise<boolean>;
    /**
     * Retrieves a value from the store.
     *
     * This method fetches data stored under the specified key within the current store scope
     * and namespace. For real-time applications that need to respond to changes, consider
     * using subscribe() instead.
     *
     * @template T The expected type of the stored value
     * @param key The key to retrieve the value for
     * @returns A promise that resolves to the stored value, or undefined if the key does not exist
     */
    get<T>(key: string): Promise<T>;
    /**
     * Subscribes to changes in the store for a specific key.
     *
     * This method sets up a subscription that will call the provided handler whenever
     * the value associated with the specified key changes. This is the recommended way
     * to access store data in long-running applications that need to stay responsive
     * to data changes.
     *
     * @param key The key to subscribe to
     * @param handler The callback function to call when the value changes
     * @returns A promise that resolves to true if the subscription was successful
     */
    subscribe(key: string, handler: MessageHandler<any>): Promise<boolean>;
    /**
     * Unsubscribes from changes in the store for a specific key.
     *
     * This method removes a subscription previously created with subscribe(). It can
     * either remove a specific handler or all handlers for the given key.
     *
     * @param key The key to unsubscribe from
     * @param handler Optional. The specific handler to remove. If not provided, all handlers for this key will be removed.
     * @returns A promise that resolves to true if the unsubscription was successful
     */
    unsubscribe(key: string, handler?: MessageHandler<any>): Promise<boolean>;
    /**
     * Deletes a value from the store.
     *
     * This method removes the data stored under the specified key within the
     * current store scope and namespace.
     *
     * @param key The key to delete
     * @returns A promise that resolves to true if the value was deleted successfully
     */
    delete(key: string): Promise<boolean>;
}
export {};
