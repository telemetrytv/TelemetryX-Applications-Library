import { spawn } from 'child_process';
import { readFile } from 'fs/promises';
import http from 'http';
import path from 'path';
import readable from 'readline/promises';
import serveHandler from 'serve-handler';
const ansiYellow = '\u001b[33m';
const ansiCyan = '\u001b[36m';
const ansiBold = '\u001b[1m';
const ansiReset = '\u001b[0m';
export async function runServer(projectPath, flags) {
    printSplashScreen();
    projectPath = path.resolve(process.cwd(), projectPath);
    const telemetryConfig = await loadConfigFile(projectPath);
    if (!telemetryConfig) {
        console.error('No telemetry configuration found. Are you in the right directory?');
        process.exit(1);
    }
    await serveDevelopmentApplicationHostUI(flags.port, telemetryConfig);
    await serveTelemetryApplication(projectPath, telemetryConfig);
}
async function serveDevelopmentApplicationHostUI(port, telemetryConfig) {
    const hostUiPath = await import.meta.resolve('@telemetryx/development-application-host-ui/dist');
    const serveConfig = { public: hostUiPath.replace('file://', '') };
    const server = http.createServer();
    server.on('request', (req, res) => {
        const url = new URL(req.url, `http://${req.headers.origin}`);
        if (url.pathname === '/__tx-config__') {
            res.setHeader('Content-Type', 'application/json');
            res.end(JSON.stringify(telemetryConfig));
            return;
        }
        serveHandler(req, res, serveConfig).catch((err) => {
            console.error('Error handling request:', err);
            res.statusCode = 500;
            res.end('Internal Server Error');
        });
    });
    printServerInfo(port);
    server.listen(port);
}
async function serveTelemetryApplication(rootPath, telemetryConfig) {
    var _a;
    if (!((_a = telemetryConfig === null || telemetryConfig === void 0 ? void 0 : telemetryConfig.devServer) === null || _a === void 0 ? void 0 : _a.runCommand))
        return;
    const runCommand = telemetryConfig.devServer.runCommand;
    const binPath = path.join(rootPath, 'node_modules', '.bin');
    const childProcess = spawn(runCommand, {
        shell: true,
        env: { ...process.env, FORCE_COLOR: '1', PATH: `${binPath}:${process.env.PATH}` },
        stdio: ['ignore', 'pipe', 'pipe'],
        cwd: rootPath,
    });
    const stdoutReadline = readable.createInterface({
        input: childProcess.stdout,
        crlfDelay: Infinity,
    });
    const stderrReadline = readable.createInterface({
        input: childProcess.stderr,
        crlfDelay: Infinity,
    });
    stdoutReadline.on('line', (line) => {
        console.log(`[application]: ${line}`);
    });
    stderrReadline.on('line', (line) => {
        console.error(`[application]: ${line}`);
    });
    process.on('exit', () => {
        childProcess.kill();
    });
}
async function loadConfigFile(rootPath) {
    const configFilePath = path.join(rootPath, 'telemetry.config.json');
    try {
        const fileContent = await readFile(configFilePath, 'utf-8');
        const config = JSON.parse(fileContent);
        return config;
    }
    catch {
        return null;
    }
}
function printSplashScreen() {
    console.log(`${ansiYellow}
                                            ▄             ▄
                                            █ █         ▄▀▐
                                            █ █ █     ▄▀  ▐
  █       █                  █              █ █ █ █  ▀   ▄▀
  █       █                  █                █ ▛ ▄ █   ▀  
 ▀█▀ ▄▀▀▄ █ ▄▀▀▄ █▀▄▀▄ ▄▀▀▄ ▀█▀ █▄▀ █ █         ▄▀  █ █    
  █  █▀▀▀ █ █▀▀▀ █ █ █ █▀▀▀  █  █   █ █       ▄▀    █ █ █  
  ▀▄ ▀▄▄▀ █ ▀▄▄▀ █ █ █ ▀▄▄▀  ▀▄ █    █      ▄▀   ▄▀ ▀ █ █ █
                                    ▄▀      ▌  ▄▀     ▀ █ █
                                            ▌▄▀         ▀ █
                                            ▀             ▀
${ansiReset}`);
}
function printServerInfo(port) {
    console.log(`
╔═══════════════════════════════════════════════════════════╗
║ ${ansiBold}Development environment running at: ${ansiCyan}http://localhost:${port}${ansiReset} ║
╚═══════════════════════════════════════════════════════════╝
`);
}
